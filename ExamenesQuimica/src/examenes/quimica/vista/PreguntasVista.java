/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package examenes.quimica.vista;

import examenes.quimica.db.CatalogosDAO;
import examenes.quimica.db.PreguntasDAO;
import examenes.quimica.excepciones.ExamenesQuimicaException;
import examenes.quimica.modelo.CatMateria;
import examenes.quimica.modelo.CatRespuesta;
import examenes.quimica.modelo.Pregunta;
import examenes.quimica.util.ConstantesUtil;
import java.sql.Connection;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author desarrollo
 */
public class PreguntasVista extends FormBase {

    private static final long serialVersionUID = -6663764186088864775L;

    private final Connection con;
    private final CatalogosDAO catalogosDAO;
    private final PreguntasDAO preguntasDAO;
    private Pregunta pregunta;
    /**
     * Creates new form PreguntasVista
     * @param con
     */
    public PreguntasVista(Connection con) {
        initComponents();
        this.con = con;
        pregunta = new Pregunta();
        catalogosDAO = new CatalogosDAO(con);
        preguntasDAO = new PreguntasDAO(con);
        lblEditando.setVisible(false);
        initCombos();
    }
    
    public PreguntasVista(Connection con, Pregunta pregunta) {
        initComponents();
        this.con = con;
        catalogosDAO = new CatalogosDAO(con);
        preguntasDAO = new PreguntasDAO(con);
        this.pregunta = pregunta;
        initCombos();
        
        txtPregunta.setText(pregunta.getPregunta());
        cboUnidad.setSelectedIndex(pregunta.getUnidad());
        cboMaterias.setSelectedItem(pregunta.getMateria().toString());
        cboRespuesta.setSelectedItem(pregunta.getTipoRespuesta().toString());
        
        switch (pregunta.getTipoRespuesta().getId()) {
            case ConstantesUtil.RESPUESTA_ABIERTA :
            case ConstantesUtil.RESPUESTA_MAPA :
                ((DefaultTableModel) tblOpciones.getModel()).addRow(new Object[]{pregunta.getOpciones()});
                break;
            case ConstantesUtil.RESPUESTA_OPCION :
                for (String op : pregunta.getOpciones().split(";")) {
                    ((DefaultTableModel) tblOpciones.getModel()).addRow(new Object[]{op});
                }
        }
    }
    
    private void initCombos() {
        List<CatMateria> materias = catalogosDAO.buscarMateria(null);
        DefaultComboBoxModel modelMat = new DefaultComboBoxModel();
        modelMat.addElement("Seleccione");
        for (CatMateria m : materias) {
            modelMat.addElement(m.toString());
        }
        cboMaterias.setModel(modelMat);
        
        List<CatRespuesta> tiposRespuestas = catalogosDAO.buscarRespuesta(null);
        DefaultComboBoxModel modelRes = new DefaultComboBoxModel();
        modelRes.addElement("Seleccione");
        for (CatRespuesta r : tiposRespuestas) {
            modelRes.addElement(r.toString());
        }
        cboRespuesta.setModel(modelRes);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cboMaterias = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cboUnidad = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtPregunta = new javax.swing.JTextArea();
        jLabel4 = new javax.swing.JLabel();
        cboRespuesta = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        txtOpcion = new javax.swing.JTextField();
        btnAgregar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblOpciones = new javax.swing.JTable();
        btnGuardar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnNuevo = new javax.swing.JButton();
        lblEditando = new javax.swing.JLabel();

        setClosable(true);
        setTitle("Preguntas");

        jLabel1.setText("Materia");

        jLabel2.setText("Unidad");

        cboUnidad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "1", "2", "3", "4" }));

        jLabel3.setText("Pregunta");

        txtPregunta.setColumns(20);
        txtPregunta.setRows(5);
        jScrollPane1.setViewportView(txtPregunta);

        jLabel4.setText("Respuesta");

        jLabel5.setText("Opciones");

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarOpcion(evt);
            }
        });

        tblOpciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Opci√≥n"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblOpciones.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        tblOpciones.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                eliminarOpcion(evt);
            }
        });
        jScrollPane2.setViewportView(tblOpciones);

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarPregunta(evt);
            }
        });

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiar(evt);
            }
        });

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevaPregunta(evt);
            }
        });

        lblEditando.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblEditando.setForeground(new java.awt.Color(255, 0, 51));
        lblEditando.setText("E D I T A N D O . . .");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblEditando)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnNuevo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLimpiar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGuardar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtOpcion, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAgregar))
                            .addComponent(cboRespuesta, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cboMaterias, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addGap(12, 12, 12)
                                .addComponent(cboUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))))
                .addContainerGap(32, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cboMaterias, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cboUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboRespuesta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtOpcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAgregar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar)
                    .addComponent(btnLimpiar)
                    .addComponent(btnNuevo)
                    .addComponent(lblEditando))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void agregarOpcion(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarOpcion
        if (cboRespuesta.getSelectedIndex() != ConstantesUtil.RESPUESTA_OPCION &&
                tblOpciones.getRowCount() >= 1) {
            agregarMensajeAdvertencia("Para el tipo de respuesta seleccionado, solo se puede agregar una opci√≥n");
            return;
        }
        if (txtOpcion.getText() == null || txtOpcion.getText().isEmpty()) {
            agregarMensajeAdvertencia("El campo Opci√≥n es requerido");
            return;
        }
        ((DefaultTableModel) tblOpciones.getModel()).addRow(new Object[]{txtOpcion.getText()});
        txtOpcion.setText("");
    }//GEN-LAST:event_agregarOpcion

    private void guardarPregunta(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarPregunta
        if (preguntaValida()) {
            pregunta.getMateria().setId(Integer.parseInt(cboMaterias.getSelectedItem().toString().split(" - ")[0]));
            pregunta.setUnidad(cboUnidad.getSelectedIndex());
            pregunta.setPregunta(txtPregunta.getText());
            pregunta.getTipoRespuesta().setId(cboRespuesta.getSelectedIndex());
            if (pregunta.getTipoRespuesta().getId() != ConstantesUtil.RESPUESTA_COMPLEMENTAR) {
                String opcs = "";
                for (int i = 0; i < tblOpciones.getRowCount(); i++) {
                    opcs += tblOpciones.getValueAt(i, 0) + ";";
                }
                pregunta.setOpciones(opcs);
            }
            try {
                preguntasDAO.guardar(pregunta);
                agregarMensajeExito("La pregunta se guard√≥ correctamente");
                nuevaPregunta(evt);
            } catch (ExamenesQuimicaException ex) {
                agregarMensajeError(ex.getMessage());
            }
        }
    }//GEN-LAST:event_guardarPregunta

    private boolean preguntaValida() {
        if (cboMaterias.getSelectedIndex() == 0) {
            agregarMensajeAdvertencia("La Materia es requerida");
            return false;
        }
        if (cboUnidad.getSelectedIndex() == 0) {
            agregarMensajeAdvertencia("La Unidad es requerida");
            return false;
        }
        if (txtPregunta.getText() == null || txtPregunta.getText().isEmpty()) {
            agregarMensajeAdvertencia("La Pregunta es requerida");
            return false;
        }
        if (cboRespuesta.getSelectedIndex() == 0) {
            agregarMensajeAdvertencia("La Respuesta es requerida");
            return false;
        }
        if (cboRespuesta.getSelectedIndex() != ConstantesUtil.RESPUESTA_COMPLEMENTAR
                && tblOpciones.getRowCount() == 0) {
            agregarMensajeAdvertencia("No se especificaron las opciones de respuesta");
            return false;
        }
        return true;
    }
    private void limpiar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiar
        cboMaterias.setSelectedIndex(0);
        cboUnidad.setSelectedIndex(0);
        txtPregunta.setText(null);
        cboRespuesta.setSelectedIndex(0);
        txtOpcion.setText(null);
        limpiarTabla(tblOpciones);
    }//GEN-LAST:event_limpiar

    private void nuevaPregunta(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevaPregunta
        pregunta = new Pregunta();
        limpiar(null);
        lblEditando.setVisible(false);
    }//GEN-LAST:event_nuevaPregunta

    private void eliminarOpcion(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_eliminarOpcion
        if (SwingUtilities.isRightMouseButton(evt)) {
            int dialogResult = JOptionPane.showConfirmDialog(null, "Desea quitar la opci√≥n?", "Advertencia", JOptionPane.YES_NO_OPTION);
            if (dialogResult == JOptionPane.YES_OPTION) {
                ((DefaultTableModel) tblOpciones.getModel()).removeRow(tblOpciones.getSelectedRow());
            }
        }
    }//GEN-LAST:event_eliminarOpcion


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JComboBox<String> cboMaterias;
    private javax.swing.JComboBox<String> cboRespuesta;
    private javax.swing.JComboBox<String> cboUnidad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblEditando;
    private javax.swing.JTable tblOpciones;
    private javax.swing.JTextField txtOpcion;
    private javax.swing.JTextArea txtPregunta;
    // End of variables declaration//GEN-END:variables
}
