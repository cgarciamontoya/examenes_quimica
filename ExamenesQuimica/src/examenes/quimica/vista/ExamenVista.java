/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package examenes.quimica.vista;

import examenes.quimica.db.CatalogosDAO;
import examenes.quimica.db.ExamenesDAO;
import examenes.quimica.db.PreguntasDAO;
import examenes.quimica.excepciones.ExamenesQuimicaException;
import examenes.quimica.modelo.CatMateria;
import examenes.quimica.modelo.CatRespuesta;
import examenes.quimica.modelo.Examen;
import examenes.quimica.modelo.Pregunta;
import examenes.quimica.reportes.vo.ExamenReporteVO;
import examenes.quimica.reportes.vo.ExamenVO;
import examenes.quimica.util.ConstantesUtil;
import examenes.quimica.util.ReportesManager;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author desarrollo
 */
public class ExamenVista extends FormBase {

    private static final long serialVersionUID = 2241099364900823672L;
    
    private static final String ESPACIO = "_";
    private static final String TABULADOR = "\t";

    private final CatalogosDAO catalogosDAO;
    private final ExamenesDAO examenesDAO;
    private final PreguntasDAO preguntasDAO;
    private final ReportesManager reportesManager;
    private Examen examen;
    
    /**
     * Creates new form ExamenVista
     * @param con
     */
    public ExamenVista(Connection con) {
        initComponents();
        catalogosDAO = new CatalogosDAO(con);
        examenesDAO = new ExamenesDAO(con);
        preguntasDAO = new PreguntasDAO(con);
        lblEditando.setVisible(false);
        reportesManager = new ReportesManager(con);
        cargarCatalogos();
    }
    
    public ExamenVista(Connection con, int idExamen) {
        initComponents();
        catalogosDAO = new CatalogosDAO(con);
        examenesDAO = new ExamenesDAO(con);
        preguntasDAO = new PreguntasDAO(con);
        reportesManager = new ReportesManager(con);
        cargarCatalogos();
        lblEditando.setVisible(true);
        examen = examenesDAO.buscarPorId(idExamen);
        
        cboMateria.setSelectedItem(examen.getMateria().toString());
        cboMateria.setEnabled(false);
        cboUnidad.setSelectedIndex(examen.getUnidad());
        cboUnidad.setEnabled(false);
        txtNombre.setText(examen.getNombre());
        
        for (Pregunta p : examen.getPreguntas()) {
            ((DefaultTableModel) tblPreguntas.getModel()).addRow(new Object[]{p.getId(), p.getPregunta()});
        }
    }
    
    private void cargarCatalogos() {
        List<CatMateria> materias = catalogosDAO.buscarMateria(null);
        DefaultComboBoxModel modelMat = new DefaultComboBoxModel();
        modelMat.addElement("Seleccione");
        for (CatMateria m : materias) {
            modelMat.addElement(m.toString());
        }
        cboMateria.setModel(modelMat);
        
        List<CatRespuesta> tiposRespuestas = catalogosDAO.buscarRespuesta(null);
        DefaultComboBoxModel modelRes = new DefaultComboBoxModel();
        modelRes.addElement("Seleccione");
        for (CatRespuesta r : tiposRespuestas) {
            modelRes.addElement(r.toString());
        }
        cboRespuesta.setModel(modelRes);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        cboMateria = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        cboUnidad = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cboPregunta = new javax.swing.JComboBox<>();
        btnGuardar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnAgregar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPreguntas = new javax.swing.JTable();
        btnExportar = new javax.swing.JButton();
        lblEditando = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cboRespuesta = new javax.swing.JComboBox<>();

        setClosable(true);
        setTitle("Ex√°menes");

        jLabel1.setText("Materia");

        cboMateria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarPreguntas(evt);
            }
        });

        jLabel2.setText("Unidad");

        cboUnidad.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "1", "2", "3", "4", "ORD", "EXT", "TIT", "EXTIT" }));
        cboUnidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actualizarPreguntasUnidad(evt);
            }
        });

        jLabel3.setText("Nombre");

        jLabel4.setText("Pregunta");

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardar(evt);
            }
        });

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiar(evt);
            }
        });

        btnAgregar.setText("Agregar");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarPregunta(evt);
            }
        });

        tblPreguntas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Pregunta", "T. Respuesta"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPreguntas.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        tblPreguntas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                quitarPregunta(evt);
            }
        });
        jScrollPane1.setViewportView(tblPreguntas);
        if (tblPreguntas.getColumnModel().getColumnCount() > 0) {
            tblPreguntas.getColumnModel().getColumn(0).setPreferredWidth(80);
        }

        btnExportar.setText("Exportar");
        btnExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportar(evt);
            }
        });

        lblEditando.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        lblEditando.setForeground(new java.awt.Color(255, 0, 51));
        lblEditando.setText("E D I T A N D O . . .");

        jLabel5.setText("T. Resp.");

        cboRespuesta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cargarPreguntasRespuesta(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cboMateria, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cboRespuesta, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(cboUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtNombre)
                    .addComponent(cboPregunta, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblEditando)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 214, Short.MAX_VALUE)
                .addComponent(btnAgregar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnExportar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimpiar)
                .addGap(10, 10, 10))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1)
                .addGap(10, 10, 10))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cboMateria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(cboUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cboRespuesta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cboPregunta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnGuardar)
                    .addComponent(btnLimpiar)
                    .addComponent(btnAgregar)
                    .addComponent(btnExportar)
                    .addComponent(lblEditando))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void actualizarPreguntas(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarPreguntas
        cargarPreguntas();
    }//GEN-LAST:event_actualizarPreguntas

    private void cargarPreguntas() {
        cboPregunta.removeAllItems();
        if (cboMateria.getSelectedIndex() > 0 && cboUnidad.getSelectedIndex() > 0) {
            Pregunta filtro = new Pregunta();
            filtro.setUnidad(cboUnidad.getSelectedIndex());
            filtro.setMateria(new CatMateria(Integer.parseInt(cboMateria.getSelectedItem().toString().split(" - ")[0]), 
                    cboMateria.getSelectedItem().toString().split(" - ")[1]));
            if (cboRespuesta.getSelectedIndex() > 0) {
                filtro.getTipoRespuesta().setId(Integer.parseInt(cboRespuesta.getSelectedItem().toString().split(" - ")[0]));
            }
            List<Pregunta> preguntas = preguntasDAO.consultaPreguntas(filtro);
            DefaultComboBoxModel model = new DefaultComboBoxModel();
            model.addElement("Seleccione");
            for (Pregunta p : preguntas) {
                model.addElement(p.getId() + " - " + p.getPregunta());
            }
            cboPregunta.setModel(model);
        }
    }
    
    private void guardar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardar
        if (confirmarPregunta("Desea guardar el examen?")) {
            if (cboMateria.getSelectedIndex() == 0) {
                agregarMensajeAdvertencia("La Materia es requerida");
                return;
            }
            if (cboUnidad.getSelectedIndex() == 0) {
                agregarMensajeAdvertencia("La Unidad es requerida");
                return;
            }
            if (txtNombre.getText() == null || txtNombre.getText().isEmpty()) {
                agregarMensajeAdvertencia("El Nombre es requerido");
                return;
            }
            if (tblPreguntas.getRowCount() == 0) {
                agregarMensajeAdvertencia("Las preguntas son requeridas");
                return;
            }
            if (examen == null) {
                examen = new Examen();
            }
            examen.setMateria(new CatMateria(Integer.parseInt(cboMateria.getSelectedItem().toString().split(" - ")[0]), 
                    cboMateria.getSelectedItem().toString().split(" - ")[1]));
            examen.setUnidad(cboUnidad.getSelectedIndex());
            examen.setNombre(txtNombre.getText());

            List<Pregunta> preguntas = new ArrayList<>();
            for (int i = 0; i < tblPreguntas.getRowCount(); i++) {
                Pregunta p = new Pregunta();
                p.setId((Integer) tblPreguntas.getValueAt(i, 0));
                preguntas.add(p);
            }
            examen.setPreguntas(preguntas);
            try {
                if (examen.getId() == 0) {
                    examenesDAO.guardarExamen(examen);
                    agregarMensajeExito("El Examen se guard√≥ correctamente");
                } else {
                    examenesDAO.actualizarExamen(examen);
                    agregarMensajeExito("El Examen se actualiz√≥ correctamente");
                }
                this.dispose();
            } catch (ExamenesQuimicaException ex) {
                agregarMensajeError(ex.getMessage());
            }
        }
    }//GEN-LAST:event_guardar

    private void limpiar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiar
        limpiarTabla(tblPreguntas);
        txtNombre.setText(null);
        cboPregunta.setSelectedIndex(0);
        if (examen == null || examen.getId() == 0) {
            cboMateria.setSelectedIndex(0);
            cboUnidad.setSelectedIndex(0);
        }
    }//GEN-LAST:event_limpiar

    private void agregarPregunta(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarPregunta
        if (cboPregunta.getSelectedIndex() > 0) {
            Pregunta p = preguntasDAO.consultaPreguntaId(Integer.parseInt(cboPregunta.getSelectedItem().toString().split(" - ")[0]));
            if (tblPreguntas.getRowCount() > 0) {
                for (int i = 0; i < tblPreguntas.getRowCount(); i++) {
                    if ((Integer) tblPreguntas.getValueAt(i, 0) == p.getId()) {
                        agregarMensajeAdvertencia("La pregunta ya fue agregada");
                        return;
                    }
                }
            }
            ((DefaultTableModel) tblPreguntas.getModel()).addRow(new Object[]{p.getId(), p.getPregunta(), p.getTipoRespuesta().getNombre()});
            resizeColumnWidth(tblPreguntas);
        } else {
            agregarMensajeAdvertencia("Debe seleccionar la pregunta");
        }
    }//GEN-LAST:event_agregarPregunta

    private void exportar(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportar
        if (cboMateria.getSelectedIndex() == 0) {
            agregarMensajeAdvertencia("La Materia es requerida");
            return;
        }
        if (cboUnidad.getSelectedIndex() == 0) {
            agregarMensajeAdvertencia("La Unidad es requerida");
            return;
        }
        if (tblPreguntas.getRowCount() == 0) {
            agregarMensajeAdvertencia("No se han especificado las preguntas del reporte");
            return;
        }
        exportarExamenVO();
    }//GEN-LAST:event_exportar

    private void exportarExamenVO() {
        List<ExamenVO> preguntasMain = new ArrayList<>();
        List<CatRespuesta> tiposRespuesta = catalogosDAO.getTiposRespuesta();
        
        List<ExamenReporteVO> preguntas = null;
        Map<Integer, List<ExamenReporteVO>> mapaPreguntas = new HashMap<>();
        for (int i = 0; i < tblPreguntas.getRowCount(); i++) {
            Pregunta p = preguntasDAO.consultaPreguntaId((Integer) tblPreguntas.getValueAt(i, 0));
            List<Map<String,String>> respuesta = new ArrayList<>();
            ExamenReporteVO ervo = new ExamenReporteVO();
            ervo.setPregunta(p.getPregunta());
            int linea = 0;
            switch (p.getTipoRespuesta().getId()) {
                case ConstantesUtil.RESPUESTA_ABIERTA:
                case ConstantesUtil.RESPUESTA_MAPA:
                    int numRen = Integer.parseInt(p.getOpciones().split(";")[0]);
                    ervo.setNoCampos(1);
                    Map<String, String> mapa = new HashMap<>();
                    for (int nr = 0; nr < numRen; nr++) {
                        mapa.put("campo1", " ");
                        respuesta.add(mapa);
                    }
                    break;
                case ConstantesUtil.RESPUESTA_OPCION:
                    respuesta.add(generarMapa(p.getOpciones().split(";"), ervo));
                    break;
                case ConstantesUtil.RESPUESTA_TABLA:
                case ConstantesUtil.RESPUESTA_RELACIONAR:  
                    linea = p.getTipoRespuesta().getId() == ConstantesUtil.RESPUESTA_TABLA ? 1 : 0;
                    String[] renglones = p.getOpciones().split("#");
                    String[] encabezados = renglones[0].split(";");
                    respuesta.add(generarMapa(encabezados, ervo));
                    for (int rr = 1; rr < renglones.length; rr++) {
                        respuesta.add(generarMapa(renglones[rr].split(";"), ervo));
                    }
            }
            
            ervo.setRespuesta(respuesta);
            ervo.setLinea(linea);
            if (!mapaPreguntas.containsKey(p.getTipoRespuesta().getId())) {
                mapaPreguntas.put(p.getTipoRespuesta().getId(), new ArrayList<ExamenReporteVO>());
            }
            mapaPreguntas.get(p.getTipoRespuesta().getId()).add(ervo);
        }
        int idxIns = 1;
        for (Integer key : mapaPreguntas.keySet()) {
            ExamenVO vo = new ExamenVO();
            String instrucciones = "";
            for (CatRespuesta tr : tiposRespuesta) {
                if (key.equals(tr.getId())) {
                    switch (idxIns) {
                        case 1 : 
                            instrucciones = "I. ";
                            break;
                        case 2 :
                            instrucciones = "II. ";
                            break;
                        case 3 :
                            instrucciones = "III. ";
                            break;
                        case 4 :
                            instrucciones = "IV. ";
                            break;
                        case 5 :
                            instrucciones = "V. ";
                            break;
                    }
                    instrucciones += tr.getDescripcion();
                    break;
                }
            }
            vo.setInstrucciones(instrucciones);
            preguntas = new ArrayList<>();
            preguntas.addAll(mapaPreguntas.get(key));
            int idx = 1;
            for (ExamenReporteVO ervo : preguntas) {
                ervo.setPregunta(idx++ + ". " + ervo.getPregunta());
            }
            vo.setPreguntas(preguntas);
            preguntasMain.add(vo);
            idxIns++;
        }
        try {
            String nombre = "";
            if (txtNombre.getText() == null || txtNombre.getText().isEmpty()) {
                nombre = cboMateria.getSelectedItem().toString().split(" - ")[1] + " Unidad " + cboUnidad.getSelectedIndex();
            } else {
                nombre = txtNombre.getText();
            }
            reportesManager.generarExamenInstrucciones(cboMateria.getSelectedItem().toString().split(" - ")[1], 
                    nombre, preguntasMain);
        } catch(ExamenesQuimicaException ex) {
            agregarMensajeError(ex.getMessage());
        }
    }
    private Map<String, String> generarMapa(String[] datos, ExamenReporteVO ervo) {
        ervo.setNoCampos(datos.length);
        Map<String, String> mapa = new HashMap<>();
        int index = 1;
        for (String d : datos) {
            mapa.put("campo" + index, d);
            index++;
        }
        return mapa;
    }
    private void quitarPregunta(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_quitarPregunta
        if (confirmarPregunta(evt, "Desea quitar la pregunta?")) {
            ((DefaultTableModel) tblPreguntas.getModel()).removeRow(tblPreguntas.getSelectedRow());
        }
    }//GEN-LAST:event_quitarPregunta

    private void actualizarPreguntasUnidad(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actualizarPreguntasUnidad
        cargarPreguntas();
    }//GEN-LAST:event_actualizarPreguntasUnidad

    private void cargarPreguntasRespuesta(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cargarPreguntasRespuesta
        cargarPreguntas();
    }//GEN-LAST:event_cargarPreguntasRespuesta


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JButton btnExportar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JComboBox<String> cboMateria;
    private javax.swing.JComboBox<String> cboPregunta;
    private javax.swing.JComboBox<String> cboRespuesta;
    private javax.swing.JComboBox<String> cboUnidad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblEditando;
    private javax.swing.JTable tblPreguntas;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
